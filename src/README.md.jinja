{%- set ontology_file_name = ontology_file | replace('.nt', '') | replace('.ttl', '') -%}
{%- set shape_file_name = shape_file | replace('.nt', '') | replace('.ttl', '') -%}
# {{ project_name }}

Ontology Repository

## Requirements
To execute the ontology pipeline you need:
- [Task](https://taskfile.dev/)
- [Docker](https://www.docker.com/), [Podman](https://podman.io/), or a compatible container engine
- [Python 3](https://www.python.org/)

## TODO

- [ ] 🛠️ Adjust config in `cmemc.ini` (Find details on [documentation.eccenca.com](https://documentation.eccenca.com/latest/automate/cmemc-command-line-interface/configuration/file-based-configuration/))
- [ ] 📡 Make sure to setup a remote for `git push`
- [ ] 🔗 Create a `prefixes.ttl`
- [ ] 📑 Make sure `{{ ontology_file_name }}.ttl`, `{{ ontology_file_name }}.nt`, and `{{ ontology_file_name }}.nt.graph` exist
{%- if shape %}- [ ] 📝 Make sure `{{ shape_file_name }}.ttl`, `{{ shape_file_name }}.nt`, and `{{ shape_file_name }}.nt.graph` exist{% endif %}
- [ ] 💾 Commit the newly created files

## Usage

In the directory `resources/queries/` you can add files with [SPARQL 1.1 Construct](https://www.w3.org/TR/sparql11-query/#construct) queries to extract data from your cmem instance during the run.

## Build Artifacts

The build artifacts are generated in the directory `artifacts`. In the GitHub Action Workflow the artifacts are attached to a successful build.

### Pipeline artifacts
- The Ontology Documentation:
  - `schema-documentation.html`
- The RDFUnit test results:
  - `check-rdfunit-auto-results.html`
  - `check-rdfunit-auto-results.xml`
  - `check-rdfunit-manual-results.html`
  - `check-rdfunit-manual-results.xml`
